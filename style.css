* {
    font-family: verdana;
    margin: 0;
}

body {
    background: #eee;
    color: #333;
}

.wrapper {
    width: 100%;
    max-width: 960px;
    margin: 0 auto;
}

/* MENU BASE STYLES */

nav {
    background: #333;
}

nav ul {
    list-style-type: none;
    padding: 0;
}
/*NOTE: list-style-type: none - gets rid of the dot to the left of ul content.*/

nav a {
    color: #fff;
    text-decoration: none;
    text-align: center;
    display: block;
    padding: 10px;
}
/*NOTE: display: block - enables content take up full width by default.*/

nav a:hover {
    background-color: #555;
}

/* SOCIAL MENU BASE STYLES */

a.tw {
    background: url(img/tw.png) no-repeat center;
    background-size: 80%;
}

a.fb {
    background: url(img/fb.png) no-repeat center;
    background-size: 80%;
}
/*NOTE: background: url () - can be used to style a background with an image or video located at the url directory.*/

.social a {
    text-indent: -10000px;
    margin: 0 auto;
}

.social {
    max-width: 80px;
    margin: 0 auto; /* do at end */
}
/*NOTE: Setting the text-indent to such a low digit will make the background image equally shrink;
            To correct that, set a flex property (under "nav ul.social") to let it expand to all the space available to it.
        However, this only made the image even bigger as it grew into all available space;
            Thus, we set a max-width to the .social class.
        margin: 0 auto; - styles the website to have similar style for both mobile and desktop view;
            This centralised the social container while in mobile view.
*/

/* GRID VS FLEX BASE STYLES */

#blocks {
    margin: 20px;
}

article {
    background: #fff;
    margin-bottom: 20px;
    padding: 10px;
    box-sizing: border-box;
}
/*NOTE: box-sizing: border-box; - incorporates the given padding into overall width.*/

article h2 {
    text-align: center;
    font-size: 20px;
    margin: 10px 0;
}
/*NOTE: When two margins are stated, the first targets top & bottom while the other left & right.*/


/* FLEX STYLES */

nav ul.social {
    flex: 1 1 0;
    display: flex;
}

nav ul.social li {
    flex: 1 1 0;
}
/*NOTE: display: flex - sets the social container to flex (ie tw and fb images aligned left to right),
            again though, images become too small/big and the flex property (under "nav ul.social li") is used to correct that.
*/



@media screen and (min-width: 768px) {

    nav ul {
        display: flex;
    }
    /*NOTE: To enable the nav li become flex item, you have to make the nav ul a flex container,
                and the above funtion serves that purpose.
            Justify-content: XXX - justifies how the flex items will appear on the flex container;
                center; centers flex item in flex container.
                flex-start; default behaviour where flex items are to the start(left).
                flex-end; opposite of flex-start (note: unlike float, it does not affect the order of contents).
                space-around; spaces the flex item across container with space included at the beginning and end.
                space-between; spaces the flex item across container with no space at the beginning and end. 
    */

    nav li {
        flex: 1 1 0;
    }

    nav {
        display: flex;
        justify-content: space-between;
    }
    /*NOTE: The style here will target the flex containers and not the flex items,
                thus, justify-content: space-between will create space between both flex containers.
    */
    
    ul.social {
        margin: 0;
    }
    /*NOTE: margin: 0 - sets the tw and fb nests to sit to the far right*/

    #blocks {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    article {
        flex: 0 1 32%;
        transition: flex-basis 0.2s linear;
    }
    /*NOTE: 32% basis here incorporates 3 articles (3 x 32 = 96%) into the starting width.
            The justify-content: space-between; takes up the remaining 4% of width.
            Setting the transition flex basis as such allows a 0.2secs delay in transition,
                and it is linearly distributed thus results in animation.
    */

    article.stack {
        flex: 0 1 100%;
    }

}
/*NOTE: The above query states that only when the browser is > 768px will the flex properties take effect.*/